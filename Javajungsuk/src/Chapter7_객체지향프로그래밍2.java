
public class Chapter7_객체지향프로그래밍2 {
	public static void main(String[] args) {
		/*
		 상속
		 
		 class Parent {}
		 calss Child extends Parent {}
		 
		 - 자손클래스는 조상클래스의 모든 멤버를 상속받는다. 
		 (단, 생성자와 초기화 블럭은 상속되지 않는다.)
		 - 자손클래스의 멤버 개수는 조상 클래스보다 항상 같거나 많다.
		 
		 : 자바는 단일상속만을 허용한다
		 
		 */
		
		
		/*
		 상속과 포함, 클래스 간의 관계 결정하기
		 
		 상속관계: A는 B이다 (is -a)
		 포함관계: A는 B를 가지고있다. (has -a)
		 
		 스포츠카는 카이다. (상속)
		 원은 점을 가지고있다. (포함)
		 
		 */
		
		
		/*
		 오버라이딩(overriding)
		 : 조상클래스로부터 상속받은 메서드의 내용을 변경하는 것을 오버라이딩이라고 한다.
		 상속받은 메서드를 그대로 사용하기도 하지만, 자손클래스 자신에 맞게 변경해야 하는경우에 쓰인다.
		 */
		
		/*
		 접근제어자
		 넓은것에서 좁은것으로: public -> protected -> default -> private
		 */
		
		/*
		 오버라이딩의 조건
		 1. 선언부가 조상클래스의 메서드와 일치해야한다. 구현부는 수정할 수 있다.
		 2. 접근제어자는 조상클래스의 메서드보다 좁은 범위로 변경할 수 없다.
		 3. 조상클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.
		 */
		
		/*
		 오버로딩과 오버라이딩
		 오버로딩: 한 클래스 내에 같은 이름의 메서드를 여러개 정의하는것 -> 새로운 메서드 추가
		 오버라이딩: 상속받은 메서드의 내용을 변경하는 것
		 */
		
		
		/*
		 static
		 클래스 변수는 인스턴스에 관계없이 같은 값을 갖는다. 그 이유는 하나의 변수를 모든 인스턴스가 공유하기
		 때문이다.
		 : 멤버변수, 메서드, 초기화블럭에 사용됨
		 */
		
		/*
		 final
		 마지막의, 변경될 수 없는 --> 모든 대상에 사용될 수 있다.
		 변수에 사용되면 상수가 되고 메서드에 사용되면 오버라이딩을 할 수없게 되고 클래스에 사용되면
		 자손 클래스를 정의할 수 없게됨.
		 
		 */

		/*
		 abstarct
		 class -> 클래스 내에 추상 메서드가 선언되어 있음을 의미한다.
		 method -> 선언부만 작성하고 구현부는 작성하지 않은 추상 메서드임을 알린다.
		 추상클래스는 아직 완성되지 않은 미완성 설계도이므로 인스턴스를 생성할 수 없다.
		 : 상속을 통해서 자손클래스에 의해서만 완성될 수 있다!
		 */
		
		/*
		 접근 제어자
		 public > protected > default > private
		 
		 public: 전체 접근 가능
		 protected: 같은 패키지 내, 다른 패키지의 자손클래스에서 접근 가능
		 default: 같은 패키지 내에서만 가능
		 private: 같은 클래스 내에서만 가능
		 */
		
		/*
		 객체지향개념의 캡슐화(=데이터 감추기)
		 : 접근제어자의 존재 이유
		 1. 외부로부터 데이터를 보호하기 위해서
		 2. 외부에는 불필요한, 내부적으로만 사용되는 부분을 감추기 위해서

		 */
		
		/*
		 다형성
		 tv t = new tv();
		 smartTv s = new smartTv();
		 조상타입의 참조변수로 자손타입의 인스턴스를 참조할 수 있다
		 반대로 자손타입의 참조변수로 조상타입의 인스턴스를 참조할 수는 없다.
		 */
		
		/*
		 참조변수의 형변환
		 자손타입의 참조변수를 조상타입의 참조변수로, 조상타입의 참조변수를 자손타입의 참조변수로(캐스팅 생략 불가)
		 형변환이 가능하다.
		 */
		
		/*
		 instanceof 연산자
		 A instance of B : A(참조변수)가 B(클래스명,타입)으로 변환이 가능한지 검사하는 연산자.
		 주로 조건문에 사용된다.
		 */
		
		/*
		 Vector클래스
		 배열에 객체가 추가되거나 제거되거나 하는 등 동적으로관리되는 클래스
		 */
		
	}
}
