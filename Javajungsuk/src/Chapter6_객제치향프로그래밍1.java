
public class Chapter6_객제치향프로그래밍1 {
	public static void main(String[] args) {
		/*
		 1. 인스턴스 변수
		 클래스 영역에 선언되며, 인스턴스를 생성할 때 만들어진다.
		 인스턴스마다 별도의 저장공간을 가지므로 인스턴스마다 고유한 상태를 유지해야 하는 경우에 사용된다.
		 
		 2. 클래스 변수
		 인스턴스 변수 앞에 static을 붙이면 선언된다.
		 클래스 변수는 모든 인스턴스가 공통된 저장공간을 공유하게 되어
		 모든 인스턴스들이 공통적인 값을 가져야 하는 경우에 사용된다.
		 클래스 변수는 인스턴스를 생성하지 않고도 바로 사용할 수 있다.
		 
		 3. 지역 변수
		 메서드 내에 선언되어 메서드 내에서만 사용가능하다. 메서드가 종료되는 즉시 소멸된다.
		 
		 */
		
		/*
		 메서드란?
		 : 특정작업을 수행하는 일련의 문장들을 하나로 묶은 것이다.
		 
		 메서드의 선언부
		 : 반환타입, 메서드의 이름, 매개변수 선언으로 구성되어있다.
		 int add (int x, int y) 에 해당되는 부분
		 만약 반환값이 없는경우, 반환타입으로 'void'를 적어야 한다.
		 : () 괄호 안에 지정해준 값들을 인수 또는 인자라고 부른다.
		 
		 메서드의 구현부
		 : 메서드 선언부 다음에 오는 괄호{}를 메서드의 구현부라고 하는데, 메서드가 호출됐을때 수행할 문장들을 넣는다.
		 : 반환타입이 void가 아닌 경우 구현부 안에 return 이 반드시 포함되어야 한다.
		 
		 */
		
		/*
		 static 을 언제 붙여야 할까?
		 1. 클래스를 설계할 때 멤버변수중 모든 인스턴스에 공통으로 사용하는 것에 붙인다.
		 2. 클래스변수는 인스턴스를 생성하지 않아도 사용할 수 있다. 클래스가 메모리에 올라갈때 자동으로 생성되기 때문이다.
		 3. 클래스 메서드엔 인스턴스 변수를 사용할 수 없다.
		 
		 */
		
		/*
		 메서드 오버로딩(overloading)
		 한 클래스 내에 같은 이름의 메서드를 여러 개 정의하는 것 
		 1. 메서드 이름이 같아야 한다
		 2. 매개변수의 개수 또는 타입이 달라야한다
		 3. 반환타입은 관계없다.
		 
		 */
		 
		 /*
		  생성자에서 다른 생성자 호출하기
		  1. 생성자의 이름으로 클래스이름 대신 this를 사용한다.
		  2. 한 생성자에서 다른 생성자를 호출할 때는 반드시 첫 줄에서만 호출이 가능하다.
		  */
		 
		 /*
		  변수의 초기화
		  : 변수를 선언하고 처음으로 값을 저장하는 것
		  : 멤버변수는 초기화를 하지 않아도 기본값을 갖지만, 지역변수는 *반드시* 초기화 해야한다.
		  */
		 
		 /*
		  클래스 초기화 블럭
		  static {}
		  인스턴스 초기화 블럭
		  {}
		  */
	}
}
